---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ molecule_no_log }}"
  vars:
    resource_namespace: "{{ lookup('ansible.builtin.env', 'RESOURCE_NAMESPACE') | default(molecule_scenario_directory | md5, true) }}"

    ssh_port: 22
    ssh_user: root
    ssh_key_path: "{{ molecule_ephemeral_directory }}/ssh_key"
    ssh_key_name: "{{ resource_namespace }}"
  tasks:
    - name: Create SSH key
      community.crypto.openssh_keypair:
        path: "{{ ssh_key_path }}"
      register: generated_ssh_key

    - name: Register SSH key for server(s)
      hetzner.hcloud.hcloud_ssh_key:
        name: "{{ ssh_key_name }}"
        public_key: "{{ generated_ssh_key.public_key }}"
        labels:
          molecule: "{{ resource_namespace }}"
        state: present

    - name: Create server(s)
      hetzner.hcloud.hcloud_server:
        name: "{{ resource_namespace }}-{{ item.name }}"
        image: "{{ item.image }}"
        server_type: "{{ item.server_type | default('cx11') }}"
        ssh_keys: ["{{ ssh_key_name }}"]
        location: "{{ item.location | default(omit) }}"
        datacenter: "{{ item.datacenter | default(omit) }}"
        user_data: "{{ item.user_data | default(omit) }}"
        labels:
          molecule: "{{ resource_namespace }}"
        state: started
      loop: "{{ molecule_yml.platforms }}"
      register: servers_jobs
      async: 7200
      poll: 0

    - name: Wait for server(s) creation to complete
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ servers_jobs.results }}"
      register: servers
      until: servers is finished
      retries: 300

    - name: Create volume(s)
      hetzner.hcloud.hcloud_volume:
        name: "{{ resource_namespace }}-{{ item.name }}"
        server: "{{ resource_namespace }}-{{ item.server_name }}"
        size: "{{ item.size | default(10) }}"
        labels:
          molecule: "{{ resource_namespace }}"
        state: present
      loop: "{{ molecule_yml.platforms | molecule_get_hetznercloud_volumes() }}"

    - name: Create network(s)
      hetzner.hcloud.hcloud_network:
        name: "{{ resource_namespace }}-{{ item.name }}"
        ip_range: "{{ item.ip_range | default(omit) }}"
        labels:
          molecule: "{{ resource_namespace }}"
        state: present
      loop: "{{ molecule_yml.platforms | molecule_get_hetznercloud_networks() }}"

    - name: Create subnetwork(s) # noqa jinja[invalid]
      hetzner.hcloud.hcloud_subnetwork:
        network: "{{ resource_namespace }}-{{ item.network_name }}"
        ip_range: "{{ item.ip | ansible.utils.ipaddr('network/prefix') }}"
        network_zone: "{{ item.network_zone | default('eu-central') }}"
        type: "{{ item.type | default('cloud') }}"
        state: present
      loop: "{{ molecule_yml.platforms | molecule_get_hetznercloud_subnetworks() }}"

    - name: Attach server to subnetwork(s) # noqa jinja[invalid]
      hetzner.hcloud.hcloud_server_network:
        network: "{{ resource_namespace }}-{{ item.network_name }}"
        server: "{{ resource_namespace }}-{{ item.server_name }}"
        ip: "{{ item.ip | ansible.utils.ipaddr('address') }}"
        state: present
      loop: >
        {{
          molecule_yml.platforms
          | molecule_get_hetznercloud_subnetworks()
          | rejectattr('type', '==', 'vswitch')
        }}

    - name: Create instance config
      block:
        - name: Populate instance config dict
          ansible.builtin.set_fact:
            instance_conf_dict:
              {
                "instance": "{{ item.item.item.name }}",
                "address": "{{ item.hcloud_server.ipv4_address }}",
                "user": "{{ ssh_user }}",
                "port": "{{ ssh_port }}",
                "ssh_key_name": "{{ ssh_key_name }}",
                "identity_file": "{{ ssh_key_path }}",
                "volumes": "{{ item.item.item.volumes | default([]) }}",
                "networks": "{{ item.item.item.networks | default({}) | dict2items(key_name='name') }}",
              }
          loop: "{{ servers.results }}"
          register: instance_config_dict

        - name: Convert instance config dict to a list
          ansible.builtin.set_fact:
            instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

        - name: Dump instance config
          ansible.builtin.copy:
            content: |
              # Molecule managed

              {{ instance_conf | to_yaml }}
            dest: "{{ molecule_instance_config }}"
            mode: "0600"

    - name: Wait for SSH
      ansible.builtin.wait_for:
        host: "{{ item.address }}"
        port: "{{ item.port }}"
        search_regex: SSH
      loop: "{{ lookup('file', molecule_instance_config) | from_yaml }}"
